<protocol name="cms">
  <interface name="wl_cms_output_info" version="1">
    <event name="new_color_space" summary="a new compositor color space">
      <arg name="id" type="new_id" interface="wl_color_space"/>
    </event>

    <event name="compositing_color_space">
      <description summary="info about the output's composing color space">
        This event is send on binding and when the output's composing color space changes.
      </description>
      <arg name="output" type="object" interface="wl_output"/>
      <arg name="color_space" type="object" interface="wl_color_space"/>
    </event>

    <event name="output_color_space">
      <description summary="update output color space">
        This event is send on binding and when an wl_output's color space changes.
      </description>
      <arg name="output" type="object" interface="wl_output"/>
      <arg name="color_space" type="object" interface="wl_color_space"/>
    </event>
  </interface>

  <interface name="wl_cms" version="1">
    <request name="set_surface_color_space">
      <description summary="set the color space of a surface">
        This request sets the color space of a wl_surface.
        It's state is buffered so triggering wl_surface.commit is required for it to take effect.
      </description>
      <arg name="surface" type="object" interface="wl_surface"/>
      <arg name="color_space" type="object" interface="wl_color_space" allow-null="true"/>
    </request>

    <request name="color_space_from_profile" summary="create a new color space from a profile">
      <arg name="id" type="new_id" interface="wl_color_space"/>
      <arg name="mime_type" type="string"/>
      <arg name="fd" type="fd"/>
    </request>
    
    <request name="color_space_from_preset" summary="create a new color space from a preset">
      <arg name="id" type="new_id" interface="wl_color_space"/>
      <arg name="preset" type="int"/>
    </request>
  </interface>

  <interface name="wl_color_space" version="1">
    <description summary="a color space">
      This is an object representing a single color space.
    </description>
    
    <enum name="preset">
      <description summary="a color space"/>
      <entry name="srgb" value="0" summary="the sRGB color space"/>
      <entry name="srgb_encoded_alpha" value="1">
        <description summary="the sRGB color space with alpha multiplied in before">
         The sRGB color space with alpha multiplied in before when
         using premultiplied alpha: to_srgb_gamma(color * alpha).
        </description>
      </entry>
      <entry name="output" value="3">
        <description summary="display colors without conversion">
          Colors are displayed without any conversions.
        </description>
      </entry>
    </enum>

    <event name="outdated">
      <description summary="mark this color space as outdated">
        The compositor doesn't use this color space any more.
        The client must destroy this color space when receiving the event.
        The compositor will not send this event for color spaces created by the client.
      </description>
    </event>

    <request name="destroy" type="destructor">
      <description summary="destroy the color space">
        Destroys the color space.
      </description>
    </request>

    <request name="info">
      <description summary="request color space info">
         This makes the compositor reply with an info_* event.
      </description>
    </request>

    <event name="info_preset" summary="info about a preset color space">
      <arg name="preset" type="int"/>
    </event>

    <event name="info_profile" summary="info about a color space based on a profile">
      <arg name="mime_type" type="string"/>
      <arg name="fd" type="fd"/>
    </event>

    <event name="info_invalid" summary="the color space is invalid">
    </event>
  </interface>
</protocol>
